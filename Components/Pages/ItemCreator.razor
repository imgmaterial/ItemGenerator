@page "/ItemCreator"
@using System.Diagnostics
@using TestBlazor.Services
@using Attribute = System.Attribute
<app>
    @rendermode InteractiveServer
</app>
<header>
    <h1>Item Generator</h1>
    <p>Easily create new item suggestions</p>
</header>
<div class="container">
    <div class="horizontal-layout">
        <div>
            <p>Item Name</p>
            <input class="input-field" @bind="_itemName"/>
            <p>Item Description</p>
            <textarea class="text-input" rows="5" @bind="_itemDescription"></textarea>
            <p>Item Type</p>
            <select @bind="_itemType"  class="dropdown-items">
                @foreach (string type in _itemManager.ItemTypes)
                {
                <option value="@type">@type</option>
                }
            </select>
        </div>
        <div>
            <p>File Upload</p>
            <p><InputFile OnChange="OnFileSelected"/></p>
            @if (!string.IsNullOrEmpty(_imageUrl))
            {
                <div class="image-container">
                    <img src="@_imageUrl" alt="Uploaded Image"/>
                </div>
            }
        </div>
    </div>
    <p>Item Attributes</p>
    <button class="btn-primary" @onclick="() => AddDropDown()">Add an extra item stat</button>
    
    @foreach (DropDownModel dropDown in dropDownMenus)
    {
        <p>
            <select class="dropdown-items" @bind="dropDown.Attribute">
                @foreach (string attri in _itemManager.ItemAttributes)
                {
                    <option value="@attri">@attri</option>
                }
            </select>
            <input class="input-field" @bind="dropDown.AttributeValue"/>
        </p>
    }
    <div>
        <button class="btn-primary" @onclick="()=>AddItem()">Add Item</button>
    </div>
</div>
<div class="container horizontal-layout">
    @if (_itemManager.Items.Count > 0)
    {
        @foreach (Item item in _itemManager.Items)
        {
            <div class="horizontal-layout container-item">
                <div style="width: 150px">
                    <p>@item.Name</p>
                    <p>@item.ItemType</p>
                    <p>@item.Description</p>
                    @foreach (ItemAttribute attri in item.Attributes)
                    {
                        <p>@attri.Value  @attri.Name</p>
                    }
                </div>
                <div class="image-container-small">
                    <img src="@item.ImageUrl" alt="Uploaded Image"/>
                </div>
            </div>
        }
    }
</div>
<div>
    <button @onclick="()=>ProduceStringRepresentation()">Create Item Strings</button>
</div>
<div>
    <textarea @bind="@_stringRepresentation"></textarea>
</div>

@code {

    ItemManager _itemManager = new ItemManager();

    List<DropDownModel> dropDownMenus = new List<DropDownModel>();
    
    private string _imageUrl = string.Empty;
    private string _itemName = string.Empty;
    private string _itemDescription = string.Empty;
    private string _itemType = string.Empty;
    private string _uniqueEffect = string.Empty;
    private string _stringRepresentation = string.Empty;

    void ProduceStringRepresentation()
    {
        _stringRepresentation = _itemManager.ProduceItemStrings();
    }
    
    void AddDropDown()
    {
        dropDownMenus.Add(new DropDownModel());
    }

    public class DropDownModel
    {
        public string Attribute { get; set; } = string.Empty;
        public float AttributeValue { get; set; }
    }


    private async Task OnFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File; 
        using var stream = new MemoryStream();
        await file.OpenReadStream().CopyToAsync(stream);
        _imageUrl = $"data:{file.ContentType};base64,{Convert.ToBase64String(stream.ToArray())}";
    }

    private void AddItem()
    {
        List<ItemAttribute> attributes = new List<ItemAttribute>();
        foreach (DropDownModel dropDown in dropDownMenus)
        {
            ItemAttribute itemAttribute = new ItemAttribute(dropDown.Attribute, dropDown.AttributeValue);
            attributes.Add(itemAttribute);
        }
        Item item = new Item(_itemName,_itemType, _itemDescription, _imageUrl, _uniqueEffect,attributes);
        _itemManager.Items.Add(item);
    }
}